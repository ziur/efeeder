
package org.jala.efeeder.places;

import java.sql.Connection;
import static java.sql.Statement.RETURN_GENERATED_KEYS;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.jala.efeeder.api.command.Command;
import org.jala.efeeder.api.command.CommandUnit;
import org.jala.efeeder.api.command.In;
import org.jala.efeeder.api.command.MockCommandUnit;
import org.jala.efeeder.api.command.Out;
import org.jala.efeeder.api.command.OutBuilder;
import org.jala.efeeder.api.utils.JsonConverter;


/**
 *
 * @author ricardo_ramirez
 */
@Command
public class CreatePlaceCommand extends MockCommandUnit{
	private static final String UPDATE_PLACE_QUERY = "INSERT INTO places(name, description, phone, direction, image_link) values(?, ?, ?, ?, ?)";
	private static final String UPDATE_TAG_QUERY = "INSERT INTO tags(name) values(?)";
	private static final String GET_TAG_ID_QUERY = "SELECT id FROM tags WHERE name=?";
	private static final String UPDATE_TAG_PLACES_QUERY = "INSERT INTO tag_places(id_tag, id_place) values(?, ?)";
			
	private Connection connection;
	@Override
	public Out execute() throws Exception {
		int placeId;
		connection = parameters.getConnection();
		PreparedStatement prepareStatement = connection.prepareStatement(UPDATE_PLACE_QUERY, RETURN_GENERATED_KEYS);
		prepareStatement.setString(1, parameters.getParameter("name").toLowerCase());
		prepareStatement.setString(2, parameters.getParameter("description"));
		prepareStatement.setString(3, parameters.getParameter("phone"));
		prepareStatement.setString(4, parameters.getParameter("address"));
		prepareStatement.setString(5, parameters.getParameter("image_link"));
		prepareStatement.executeUpdate();
		ResultSet generatedKeys = prepareStatement.getGeneratedKeys();
		generatedKeys.next();
		
		/* current autogenerated place id */
		placeId = generatedKeys.getInt(1);
		String arrTags = parameters.getParameter("tags");
		String[] tags = new String[0];
		if(arrTags != null) {
			tags = arrTags.split(":");
		}
		/* tag name will be one-off */
		for (String tag : tags) {
			int tagId = getTagId(tag);
			if(tagId > 0) {
				updateTagPlaces(tagId, placeId);
			} else {
				int newTagId = createNewTag(tag);
				updateTagPlaces(newTagId, placeId);
			}
		}
		
		Place place = new Place(placeId, parameters.getParameter("name"), 
								parameters.getParameter("description"), parameters.getParameter("phone"),
								parameters.getParameter("address"), parameters.getParameter("image_link"));
		return OutBuilder.response("application/json", JsonConverter.objectToJSON(place));
		
	}
	private int getTagId(String tag) throws Exception {
		int tagId = -1; //not exits tag with this id
		PreparedStatement preparedStatement = connection.prepareStatement(GET_TAG_ID_QUERY);
		preparedStatement.setString(1, tag);
		ResultSet resultSet = preparedStatement.executeQuery();
		if (resultSet.next()) { 
			return resultSet.getInt("id");
		} else { 
			return tagId;
		}
	}

	private int createNewTag(String tag) throws SQLException {
		PreparedStatement prepareStatement = connection.prepareStatement(UPDATE_TAG_QUERY, RETURN_GENERATED_KEYS);
		prepareStatement.setString(1, tag.toLowerCase());
		prepareStatement.executeUpdate();
		ResultSet generatedKeys = prepareStatement.getGeneratedKeys();
		generatedKeys.next();
		return generatedKeys.getInt(1);
	}

	private void updateTagPlaces(int tagId, int placeId) throws SQLException {
		PreparedStatement prepareStatement = connection.prepareStatement(UPDATE_TAG_PLACES_QUERY);
		prepareStatement.setInt(1, tagId);
		prepareStatement.setInt(2, placeId);
		prepareStatement.execute();
	}
}
